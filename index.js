// This class is autogenerated from generate-class.js, all changes here will be overwritten on build.

const sample = require('lodash.samplesize');
const isNumber = require('lodash.isNumber');
const stringsJson = require('./mapped_strings');

class NaughtyStrings {

    static _getItems(key, number) {
        if (!isNumber(number) || number === 0) {
            number = stringsJson[key].length
        } else if (number === 1) {
            return Buffer.from(sample(stringsJson[key], 1)[0][0], 'base64').toString();
        }
        let selected = sample(stringsJson[key], number);
        let stringified = [];
        for (let string of selected) {
            stringified.push(Buffer.from(string, 'base64').toString())
        }
        return stringified;
    }

    static reservedStrings(number) {
        let key = 'reservedStrings';
        return this._getItems(key, number);
    }
    
    static numericStrings(number) {
        let key = 'numericStrings';
        return this._getItems(key, number);
    }
    
    static specialCharacters(number) {
        let key = 'specialCharacters';
        return this._getItems(key, number);
    }
    
    static unicodeSymbols(number) {
        let key = 'unicodeSymbols';
        return this._getItems(key, number);
    }
    
    static unicodeSubscriptSuperscriptAccents(number) {
        let key = 'unicodeSubscriptSuperscriptAccents';
        return this._getItems(key, number);
    }
    
    static quotationMarks(number) {
        let key = 'quotationMarks';
        return this._getItems(key, number);
    }
    
    static twoByteCharacters(number) {
        let key = 'twoByteCharacters';
        return this._getItems(key, number);
    }
    
    static japaneseEmoticons(number) {
        let key = 'japaneseEmoticons';
        return this._getItems(key, number);
    }
    
    static emoji(number) {
        let key = 'emoji';
        return this._getItems(key, number);
    }
    
    static regionalIndicatorSymbols(number) {
        let key = 'regionalIndicatorSymbols';
        return this._getItems(key, number);
    }
    
    static unicodeNumbers(number) {
        let key = 'unicodeNumbers';
        return this._getItems(key, number);
    }
    
    static rightToLeftStrings(number) {
        let key = 'rightToLeftStrings';
        return this._getItems(key, number);
    }
    
    static trickUnicode(number) {
        let key = 'trickUnicode';
        return this._getItems(key, number);
    }
    
    static zalgoText(number) {
        let key = 'zalgoText';
        return this._getItems(key, number);
    }
    
    static unicodeUpsidedown(number) {
        let key = 'unicodeUpsidedown';
        return this._getItems(key, number);
    }
    
    static unicodeFont(number) {
        let key = 'unicodeFont';
        return this._getItems(key, number);
    }
    
    static scriptInjection(number) {
        let key = 'scriptInjection';
        return this._getItems(key, number);
    }
    
    static sqlInjection(number) {
        let key = 'sqlInjection';
        return this._getItems(key, number);
    }
    
    static serverCodeInjection(number) {
        let key = 'serverCodeInjection';
        return this._getItems(key, number);
    }
    
    static commandInjectionRuby(number) {
        let key = 'commandInjectionRuby';
        return this._getItems(key, number);
    }
    
    static xxeInjectionXml(number) {
        let key = 'xxeInjectionXml';
        return this._getItems(key, number);
    }
    
    static unwantedInterpolation(number) {
        let key = 'unwantedInterpolation';
        return this._getItems(key, number);
    }
    
    static fileInclusion(number) {
        let key = 'fileInclusion';
        return this._getItems(key, number);
    }
    
    static knownCvEsAndVulnerabilities(number) {
        let key = 'knownCvEsAndVulnerabilities';
        return this._getItems(key, number);
    }
    
    static msdosWindowsSpecialFilenames(number) {
        let key = 'msdosWindowsSpecialFilenames';
        return this._getItems(key, number);
    }
    
    static ircSpecificStrings(number) {
        let key = 'ircSpecificStrings';
        return this._getItems(key, number);
    }
    
    static scunthorpeProblem(number) {
        let key = 'scunthorpeProblem';
        return this._getItems(key, number);
    }
    
    static humanInjection(number) {
        let key = 'humanInjection';
        return this._getItems(key, number);
    }
    
    static terminalEscapeCodes(number) {
        let key = 'terminalEscapeCodes';
        return this._getItems(key, number);
    }
    
    static iOsVulnerability(number) {
        let key = 'iOsVulnerability';
        return this._getItems(key, number);
    }
    
}
module.exports = NaughtyStrings;
