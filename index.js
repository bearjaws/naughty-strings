// This class is autogenerated from generate-class.js, all changes here will be overwritten on build.

const sample = require('lodash.samplesize');
const isNumber = require('lodash.isNumber');
const stringsJson = require('./mapped_strings');

class NaughtyStrings {

    static _getItems(key, number) {
        if (!isNumber(number) || number === 0) {
            number = stringsJson[key].length
        } else if (number === 1) {
            return Buffer.from(sample(stringsJson[key], 1)[0], 'base64').toString();
        }
        let selected = sample(stringsJson[key], number);
        let stringified = [];
        for (let string of selected) {
            stringified.push(Buffer.from(string, 'base64').toString())
        }
        return stringified;
    }

    static reservedStrings(number = 1) {
        return this._getItems('reservedStrings', number);
    }
    
    static numericStrings(number = 1) {
        return this._getItems('numericStrings', number);
    }
    
    static specialCharacters(number = 1) {
        return this._getItems('specialCharacters', number);
    }
    
    static nonWhitespaceC0ControlsU0001ThroughU0008U000EThroughU001F(number = 1) {
        return this._getItems('nonWhitespaceC0ControlsU0001ThroughU0008U000EThroughU001F', number);
    }
    
    static nonWhitespaceC1ControlsU0080ThroughU0084AndU0086ThroughU009F(number = 1) {
        return this._getItems('nonWhitespaceC1ControlsU0080ThroughU0084AndU0086ThroughU009F', number);
    }
    
    static whitespaceAllOfTheCharactersWithCategoryZsZlOrZpInUnicode(number = 1) {
        return this._getItems('whitespaceAllOfTheCharactersWithCategoryZsZlOrZpInUnicode', number);
    }
    
    static unicodeAdditionalControlCharactersAllOfTheCharactersWith(number = 1) {
        return this._getItems('unicodeAdditionalControlCharactersAllOfTheCharactersWith', number);
    }
    
    static byteOrderMarksUFeffAndUFffeEachOnItsOwnLine(number = 1) {
        return this._getItems('byteOrderMarksUFeffAndUFffeEachOnItsOwnLine', number);
    }
    
    static unicodeSymbols(number = 1) {
        return this._getItems('unicodeSymbols', number);
    }
    
    static unicodeSubscriptSuperscriptAccents(number = 1) {
        return this._getItems('unicodeSubscriptSuperscriptAccents', number);
    }
    
    static quotationMarks(number = 1) {
        return this._getItems('quotationMarks', number);
    }
    
    static twoByteCharacters(number = 1) {
        return this._getItems('twoByteCharacters', number);
    }
    
    static specialUnicodeCharactersUnion(number = 1) {
        return this._getItems('specialUnicodeCharactersUnion', number);
    }
    
    static japaneseEmoticons(number = 1) {
        return this._getItems('japaneseEmoticons', number);
    }
    
    static emoji(number = 1) {
        return this._getItems('emoji', number);
    }
    
    static regionalIndicatorSymbols(number = 1) {
        return this._getItems('regionalIndicatorSymbols', number);
    }
    
    static unicodeNumbers(number = 1) {
        return this._getItems('unicodeNumbers', number);
    }
    
    static rightToLeftStrings(number = 1) {
        return this._getItems('rightToLeftStrings', number);
    }
    
    static trickUnicode(number = 1) {
        return this._getItems('trickUnicode', number);
    }
    
    static zalgoText(number = 1) {
        return this._getItems('zalgoText', number);
    }
    
    static unicodeUpsidedown(number = 1) {
        return this._getItems('unicodeUpsidedown', number);
    }
    
    static unicodeFont(number = 1) {
        return this._getItems('unicodeFont', number);
    }
    
    static scriptInjection(number = 1) {
        return this._getItems('scriptInjection', number);
    }
    
    static sqlInjection(number = 1) {
        return this._getItems('sqlInjection', number);
    }
    
    static serverCodeInjection(number = 1) {
        return this._getItems('serverCodeInjection', number);
    }
    
    static commandInjectionRuby(number = 1) {
        return this._getItems('commandInjectionRuby', number);
    }
    
    static xxeInjectionXml(number = 1) {
        return this._getItems('xxeInjectionXml', number);
    }
    
    static unwantedInterpolation(number = 1) {
        return this._getItems('unwantedInterpolation', number);
    }
    
    static fileInclusion(number = 1) {
        return this._getItems('fileInclusion', number);
    }
    
    static knownCvEsAndVulnerabilities(number = 1) {
        return this._getItems('knownCvEsAndVulnerabilities', number);
    }
    
    static msdosWindowsSpecialFilenames(number = 1) {
        return this._getItems('msdosWindowsSpecialFilenames', number);
    }
    
    static ircSpecificStrings(number = 1) {
        return this._getItems('ircSpecificStrings', number);
    }
    
    static scunthorpeProblem(number = 1) {
        return this._getItems('scunthorpeProblem', number);
    }
    
    static humanInjection(number = 1) {
        return this._getItems('humanInjection', number);
    }
    
    static terminalEscapeCodes(number = 1) {
        return this._getItems('terminalEscapeCodes', number);
    }
    
    static iOsVulnerability(number = 1) {
        return this._getItems('iOsVulnerability', number);
    }
    
}
module.exports = NaughtyStrings;
